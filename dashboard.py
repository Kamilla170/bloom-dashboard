import asyncio
import asyncpg
import os
from datetime import datetime, timedelta
from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Bloom AI Dashboard")

# Database URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_database_url():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π DATABASE_URL —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
    import re
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway
    raw_url = os.getenv("DATABASE_URL") or os.getenv("DATABASE_PRIVATE_URL")
    
    logger.info(f"üìã –°—ã—Ä–æ–π DATABASE_URL –Ω–∞–π–¥–µ–Ω: {bool(raw_url)}")
    
    if not raw_url:
        # –ü—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        pg_host = os.getenv("PGHOST")
        pg_port = os.getenv("PGPORT", "5432")
        pg_user = os.getenv("PGUSER", "postgres")
        pg_password = os.getenv("PGPASSWORD")
        pg_database = os.getenv("PGDATABASE", "railway")
        
        if pg_host and pg_password:
            database_url = f"postgresql://{pg_user}:{pg_password}@{pg_host}:{pg_port}/{pg_database}"
            logger.info("‚úÖ DATABASE_URL —Å–æ–±—Ä–∞–Ω –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
            return database_url
        else:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            return None
    
    # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ URL
    cleaned_url = raw_url
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø–µ—Ä–≤—ã–µ 30 —Å–∏–º–≤–æ–ª–æ–≤)
    logger.info(f"üîç –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {cleaned_url[:50]}...")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
    prefixes_to_remove = [
        "railwaypostgresql://",
        "railway://",
        "railway",
    ]
    
    for prefix in prefixes_to_remove:
        if cleaned_url.startswith(prefix):
            cleaned_url = cleaned_url[len(prefix):]
            logger.info(f"üßπ –£–¥–∞–ª—ë–Ω –ø—Ä–µ—Ñ–∏–∫—Å: {prefix}")
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–µ—à–∏ –≤ –Ω–∞—á–∞–ª–µ
    cleaned_url = cleaned_url.lstrip('/')
    
    # –ï—Å–ª–∏ URL –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å postgresql://, –¥–æ–±–∞–≤–ª—è–µ–º
    if not cleaned_url.startswith("postgresql://"):
        cleaned_url = "postgresql://" + cleaned_url
        logger.info("‚ûï –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å postgresql://")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ URL
    # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: postgresql://user:password@host:port/database
    url_pattern = r'^postgresql://[^:]+:[^@]+@[^:]+:\d+/\w+$'
    
    if re.match(url_pattern, cleaned_url):
        # –õ–æ–≥–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é (—Å–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å)
        safe_parts = cleaned_url.split('@')
        if len(safe_parts) == 2:
            user_part = safe_parts[0].split('://')[1].split(':')[0]
            host_part = safe_parts[1]
            logger.info(f"‚úÖ URL –æ—á–∏—â–µ–Ω: postgresql://{user_part}:***@{host_part}")
    else:
        logger.warning(f"‚ö†Ô∏è URL –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º: {cleaned_url[:30]}...")
    
    return cleaned_url

DATABASE_URL = get_database_url()

# Database pool
db_pool = None

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    global db_pool
    
    if not DATABASE_URL:
        logger.error("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return False
    
    try:
        logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –ë–î...")
        db_pool = await asyncpg.create_pool(
            DATABASE_URL,
            min_size=1,
            max_size=3,
            timeout=30
        )
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        logger.error(f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: DATABASE_URL, DATABASE_PRIVATE_URL –∏–ª–∏ PGHOST, PGPASSWORD")
        return False

@app.on_event("startup")
async def startup():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞...")
    success = await init_db()
    if success:
        logger.info("‚úÖ –î–∞—à–±–æ—Ä–¥ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")

@app.on_event("shutdown")
async def shutdown():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global db_pool
    if db_pool:
        await db_pool.close()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    html_path = Path("/home/claude/static/index.html")
    if html_path.exists():
        return FileResponse(html_path)
    return HTMLResponse("<h1>Dashboard</h1><p>Loading...</p>")

@app.get("/api/stats/today")
async def get_today_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    if not db_pool:
        raise HTTPException(status_code=500, detail="Database not connected")
    
    try:
        async with db_pool.acquire() as conn:
            today = datetime.now().date()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            total_users = await conn.fetchval("SELECT COUNT(*) FROM users")
            
            # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            new_users_today = await conn.fetchval("""
                SELECT COUNT(*) FROM users 
                WHERE DATE(created_at) = $1
            """, today)
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
            watered_today = await conn.fetchval("""
                SELECT COUNT(DISTINCT user_id) FROM care_history 
                WHERE action_type = 'watered' 
                AND DATE(action_date) = $1
            """, today)
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
            added_plants_today = await conn.fetchval("""
                SELECT COUNT(DISTINCT user_id) FROM plants 
                WHERE DATE(saved_date) = $1
            """, today)
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è (last_activity)
            active_today = await conn.fetchval("""
                SELECT COUNT(*) FROM users 
                WHERE DATE(last_activity) = $1
            """, today)
            
            # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è
            inactive_today = total_users - active_today if active_today else total_users
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç—ã
            watered_percent = round((watered_today / total_users * 100), 1) if total_users > 0 else 0
            added_plants_percent = round((added_plants_today / total_users * 100), 1) if total_users > 0 else 0
            active_percent = round((active_today / total_users * 100), 1) if total_users > 0 else 0
            inactive_percent = round((inactive_today / total_users * 100), 1) if total_users > 0 else 0
            
            return {
                "date": today.isoformat(),
                "total_users": total_users,
                "new_users": new_users_today,
                "watered": {
                    "count": watered_today,
                    "percent": watered_percent
                },
                "added_plants": {
                    "count": added_plants_today,
                    "percent": added_plants_percent
                },
                "active": {
                    "count": active_today,
                    "percent": active_percent
                },
                "inactive": {
                    "count": inactive_today,
                    "percent": inactive_percent
                }
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/stats/yesterday")
async def get_yesterday_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞"""
    if not db_pool:
        raise HTTPException(status_code=500, detail="Database not connected")
    
    try:
        async with db_pool.acquire() as conn:
            yesterday = (datetime.now() - timedelta(days=1)).date()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≤—á–µ—Ä–∞
            total_users = await conn.fetchval("""
                SELECT COUNT(*) FROM users 
                WHERE DATE(created_at) <= $1
            """, yesterday)
            
            # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—á–µ—Ä–∞
            new_users = await conn.fetchval("""
                SELECT COUNT(*) FROM users 
                WHERE DATE(created_at) = $1
            """, yesterday)
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª–∏–ª–∏ –≤—á–µ—Ä–∞
            watered = await conn.fetchval("""
                SELECT COUNT(DISTINCT user_id) FROM care_history 
                WHERE action_type = 'watered' 
                AND DATE(action_date) = $1
            """, yesterday)
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤—á–µ—Ä–∞
            added_plants = await conn.fetchval("""
                SELECT COUNT(DISTINCT user_id) FROM plants 
                WHERE DATE(saved_date) = $1
            """, yesterday)
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—á–µ—Ä–∞
            active = await conn.fetchval("""
                SELECT COUNT(*) FROM users 
                WHERE DATE(last_activity) = $1
            """, yesterday)
            
            inactive = total_users - active if active else total_users
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç—ã
            watered_percent = round((watered / total_users * 100), 1) if total_users > 0 else 0
            added_plants_percent = round((added_plants / total_users * 100), 1) if total_users > 0 else 0
            active_percent = round((active / total_users * 100), 1) if total_users > 0 else 0
            inactive_percent = round((inactive / total_users * 100), 1) if total_users > 0 else 0
            
            return {
                "date": yesterday.isoformat(),
                "total_users": total_users,
                "new_users": new_users,
                "watered": {
                    "count": watered,
                    "percent": watered_percent
                },
                "added_plants": {
                    "count": added_plants,
                    "percent": added_plants_percent
                },
                "active": {
                    "count": active,
                    "percent": active_percent
                },
                "inactive": {
                    "count": inactive,
                    "percent": inactive_percent
                }
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/stats/week")
async def get_week_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"""
    if not db_pool:
        raise HTTPException(status_code=500, detail="Database not connected")
    
    try:
        async with db_pool.acquire() as conn:
            days = []
            
            for i in range(7):
                day = (datetime.now() - timedelta(days=i)).date()
                
                # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                new_users = await conn.fetchval("""
                    SELECT COUNT(*) FROM users WHERE DATE(created_at) = $1
                """, day)
                
                # –ü–æ–ª–∏–≤—ã
                watered = await conn.fetchval("""
                    SELECT COUNT(DISTINCT user_id) FROM care_history 
                    WHERE action_type = 'watered' AND DATE(action_date) = $1
                """, day)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
                added_plants = await conn.fetchval("""
                    SELECT COUNT(DISTINCT user_id) FROM plants WHERE DATE(saved_date) = $1
                """, day)
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ
                active = await conn.fetchval("""
                    SELECT COUNT(*) FROM users WHERE DATE(last_activity) = $1
                """, day)
                
                days.append({
                    "date": day.isoformat(),
                    "new_users": new_users,
                    "watered": watered,
                    "added_plants": added_plants,
                    "active": active
                })
            
            return {"days": list(reversed(days))}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/stats/month")
async def get_month_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"""
    if not db_pool:
        raise HTTPException(status_code=500, detail="Database not connected")
    
    try:
        async with db_pool.acquire() as conn:
            days = []
            
            for i in range(30):
                day = (datetime.now() - timedelta(days=i)).date()
                
                # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                new_users = await conn.fetchval("""
                    SELECT COUNT(*) FROM users WHERE DATE(created_at) = $1
                """, day)
                
                # –ü–æ–ª–∏–≤—ã
                watered = await conn.fetchval("""
                    SELECT COUNT(DISTINCT user_id) FROM care_history 
                    WHERE action_type = 'watered' AND DATE(action_date) = $1
                """, day)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
                added_plants = await conn.fetchval("""
                    SELECT COUNT(DISTINCT user_id) FROM plants WHERE DATE(saved_date) = $1
                """, day)
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ
                active = await conn.fetchval("""
                    SELECT COUNT(*) FROM users WHERE DATE(last_activity) = $1
                """, day)
                
                days.append({
                    "date": day.isoformat(),
                    "new_users": new_users,
                    "watered": watered,
                    "added_plants": added_plants,
                    "active": active
                })
            
            return {"days": list(reversed(days))}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    db_status = "connected" if db_pool else "disconnected"
    return {
        "status": "healthy",
        "database": db_status,
        "timestamp": datetime.now().isoformat()
    }

if __name__ == "__main__":
    import uvicorn
    logger.info("=" * 70)
    logger.info("üå± BLOOM AI DASHBOARD")
    logger.info("=" * 70)
    uvicorn.run(app, host="0.0.0.0", port=8080, log_level="info")
